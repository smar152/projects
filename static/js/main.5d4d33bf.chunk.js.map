{"version":3,"sources":["logo.svg","Components/Home.js","Components/Project1/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","to","Main","id","className","class","href","src","alt","width","height","frameborder","allow","allowfullscreen","action","for","type","name","i","d","placeholder","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,iGCgB5BC,MAbf,SAAcC,GACZ,OACE,6BACE,4CACA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,aAAT,iHCuEKC,EA9EF,SAAAF,GAAK,OAChB,yBAAKG,GAAG,YACN,4BAAQA,GAAG,UACT,yBAAKC,UAAU,4BACb,yBAAKC,MAAM,YACT,uBAAGC,KAAK,YAAYF,UAAU,YAA9B,aAIF,yBAAKA,UAAU,YACb,uBAAGE,KAAK,gBAAgBF,UAAU,YAAlC,iBAIF,yBAAKA,UAAU,YACb,uBAAGE,KAAK,WAAWF,UAAU,YAA7B,cAON,0BAAMA,UAAU,aACd,yBAAKD,GAAG,QACN,yBACEC,UAAU,SACVD,GAAG,aACHI,IAAI,qEACJC,IAAI,iBAIR,yBACED,IAAI,0JACJC,IAAI,uBACJJ,UAAU,WAGZ,yBAAKD,GAAG,YACN,wCACA,oDACA,qDAGF,yBAAKA,GAAG,gBACN,4CACA,4BACEA,GAAG,QACHM,MAAM,MACNC,OAAO,MACPH,IAAI,4CACJI,YAAY,IACZC,MAAM,0EACNC,iBAAe,EACfT,UAAU,YAId,yBAAKD,GAAG,WACN,uCACA,uCAGF,0BAAMA,GAAG,OAAOW,OAAO,6CACrB,2BAAOC,IAAI,SAAX,8BACA,2BACEC,KAAK,QACLC,KAAK,QACLC,GAAC,EACDC,EAAE,QACFC,YAAY,kBAEd,2BAAOjB,GAAG,SAASa,KAAK,e,OCrDjBK,MAff,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,YACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,UCFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d4d33bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div>\r\n      <h1> My Projects</h1>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/project1\">Εδω το καλο προτζεκτ</Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Main = props => (\r\n  <div id=\"project1\">\r\n    <header id=\"header\">\r\n      <nav className=\"navbar fixed-top bg-dark\">\r\n        <div class=\"nav-item\">\r\n          <a href=\"#features\" className=\"nav-link\">\r\n            Features\r\n          </a>\r\n        </div>\r\n        <div className=\"nav-item\">\r\n          <a href=\"#how-it-works\" className=\"nav-link\">\r\n            How it works\r\n          </a>\r\n        </div>\r\n        <div className=\"nav-item\">\r\n          <a href=\"#pricing\" className=\"nav-link\">\r\n            Pricing\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n\r\n    <main className=\"container\">\r\n      <div id=\"logo\">\r\n        <img\r\n          className=\"mw-100\"\r\n          id=\"header-img\"\r\n          src=\"https://www.gopresto.com/i/1525439629236/n/images/presto-logo2.png\"\r\n          alt=\"Presto Logo\"\r\n        />\r\n      </div>\r\n\r\n      <img\r\n        src=\"https://imgix.bustle.com/uploads/image/2018/5/22/864631f4-77d7-44a6-8093-2771da573f63-wafflemaker.jpeg?w=500&h=365&fit=crop&crop=faces&auto=format&q=70\"\r\n        alt=\"amazing waffle maker\"\r\n        className=\"mw-100\"\r\n      />\r\n\r\n      <div id=\"features\">\r\n        <h2>Features</h2>\r\n        <p>It makes waffle bowls</p>\r\n        <p>That's pretty much it</p>\r\n      </div>\r\n\r\n      <div id=\"how-it-works\">\r\n        <h2>How it works</h2>\r\n        <iframe\r\n          id=\"video\"\r\n          width=\"560\"\r\n          height=\"315\"\r\n          src=\"https://www.youtube.com/embed/_vsSm3ocMn8\"\r\n          frameborder=\"0\"\r\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowfullscreen\r\n          className=\"mw-100\"\r\n        ></iframe>\r\n      </div>\r\n\r\n      <div id=\"pricing\">\r\n        <h1>Pricing</h1>\r\n        <h3>$24,57</h3>\r\n      </div>\r\n\r\n      <form id=\"form\" action=\"https://www.freecodecamp.com/email-submit\">\r\n        <label for=\"email\">Sign up for our newsletter</label>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          i\r\n          d=\"email\"\r\n          placeholder=\"kati@kapou.gr\"\r\n        />\r\n        <input id=\"submit\" type=\"submit\" />\r\n      </form>\r\n    </main>\r\n  </div>\r\n);\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Home from \"./Components/Home\";\nimport Project1 from \"./Components/Project1/Main\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename=\"projects\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/project1\">\n          <Project1 />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}